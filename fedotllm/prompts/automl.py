def code_generation_prompt(reflection: str, dataset_path: str, skeleton: str) -> str:
    return f"""
You are a helpful and intelligent assistant specializing in solving machine learning tasks. Your role is to complete and optimize Python scripts based on user instructions while adhering strictly to the specified constraints.
# About the Dataset:
[Task]
{reflection}

[Path to Dataset]
{dataset_path}

Below is the Python script you need to complete. Your implementation must begin with a Python code block (` ```python `) and strictly produce executable code without requiring further modifications.

[solution.py] 
```python
{skeleton}
```

**Key Rules and Constraints**:
1. Do **not delete any comments** in the provided code.
2. Do **not modify code enclosed between** the designated markers (`### comment ### code ### comment ###`). This code is autogenerated and will be regenerated upon project restarts.
3. You are **prohibited from using any methods or attributes** from the Fedot framework classes (e.g., `Fedot`, `Pipeline`), except those that are **already used in the provided code** or **explicitly mentioned in the comments**.
4. You are allowed to write and modify code **only within the 'USER CODE' sections**. All other sections will be regenerated upon project restarts.

Write the whole code below.
```python
"""


def fix_solution_prompt(
    reflection: str,
    dataset_path: str,
    code_recent_solution: str,
    stdout: str,
    stderr: str,
    msg: str = "",
) -> str:
    return f"""
You are a senior machine learning engineer. Analyze the following information: the task description with reflections, the path to the dataset, the Python code from a previous solution, and the resulting stdout and stderr. Identify and correct the specific error that caused the failure without altering any other logic. Provide the complete corrected Python script in a code block.

# Task with Reflections
{reflection}

# Dataset Path
{dataset_path}

# Previous Python Solution
```python
{code_recent_solution}
```
{"# Execution Message: " + msg if msg else ""}

# Execution Output
```text
{stdout}
```

# Error Trace
```text
{stderr}
```

Write the full fixed code below.
```python
"""


def generate_configuration_prompt(reflection: str) -> str:
    return f"""
You are a machine learning expert tasked with solving a given machine learning problem.  
Review the problem description provided within the `<problem-description>` section, including any reflections or additional context.  
Your objective is to define the optimal parameters for an automated machine learning model fitting framework, ensuring alignment with the stated goals, rules, and constraints of the task.  
If specific parameter values or constraints are not provided, use default values that are commonly accepted as best practices.

<problem-description>
{reflection}
</problem-description>
"""


def problem_reflection_prompt(data_files_and_content: str, dataset_eda: str) -> str:
    return f"""
Please conduct a comprehensive analysis of the competition, focusing on the following aspects:
1. Competition Overview: Understand the background and context of the topic.
2. Files: Analyze each provided file, detailing its purpose and how it should be used in the competition.
3. Problem Definition: Clarify the problem's definition and requirements.
4. Data Information: Gather detailed information about the data, including its structure and contents.
    4.1 Data type:
        4.1.1. ID type: features that are unique identifiers for each data point, which will NOT be used in the model training.
        4.1.2. Numerical type: features that are numerical values.
        4.1.3. Categorical type: features that are categorical values.
        4.1.4 Datetime type: features that are datetime values.
    4.2 Detailed data description
5. Target Variable: Identify the target variable that needs to be predicted or optimized, which is provided in the training set but not in the test set.
6. Evaluation Metrics: Determine the evaluation metrics that will be used to assess the submissions.
7. Submission Format: Understand the required format for the final submission.
8. Other Key Aspects: Highlight any other important aspects that could influence the approach to the competition.
Ensure that the analysis is thorough, with a strong emphasis on :
1. Understanding the purpose and usage of each file provided.
2. Figuring out the target variable and evaluation metrics.
3. Classification of the features.

# Available Data File And Content in The File
{data_files_and_content}

# EDA
{dataset_eda}
"""


# # Available Data File And Content in The File
# {data_files_and_content}

# # EDA
# {dataset_eda}
# """


def reporter_prompt(metrics: str, pipeline: str, code: str) -> str:
    return f"""
You are an expert in machine learning tasked with evaluating and reporting on an ML model designed to address the problem.

Your report should adhere to the following instructions:  
- Be concise and styled like a Substack blog summary.  
- Structure the content using bullet points for readability.  
- Use Markdown formatting (e.g., headers, **bold text**, `code snippets`, tables) for clarity.  
- Explain key points in popular science language, accessible to readers from diverse fields.  
- Include code snippets and interpretation of results in layman-friendly terms.  
- Provide essential context while avoiding discussions of empty or missing values.  
- Do not include suggestions for next steps or future work.

**Report Outline:**  
1. **Overview**  
   - Problem description
   - Goal: Summarize the purpose of the model in plain terms for a general audience.

2. **Data Preprocessing**  
   - Describe the data preprocessing steps used before modeling in plain, accessible language.  
   - Provide illustrative examples to clarify specific preprocessing steps.  
    - If data normalization was applied, describe it as:  
    "Normalization ensures all features are on the same scale, improving model performance. For example, a scaling process converts values like 'age' (5-90) to 0-1."  
    - If missing values were imputed, describe it as:  
    "Missing values in the dataset were replaced using mean imputation to ensure uniformity. For example, in the column 'Income', the mean value of $50,000 was substituted for missing entries."

3. **Pipeline Summary**  
   - Summarize the steps in `{pipeline}` using accessible language and optionally include illustrative examples. 
   - Key Parameters:
    | Model   | Parameters   | Explanation   |
    |---------|--------------|---------------|
    | CatBoost| num_trees: 3000, learning_rate: 0.03, max_depth: 5, l2_leaf_reg: 0.01 | CatBoost was choosen because |
    | Model 2 | Parameter 2  | Explanation 2 |

4. **Code Highlights:**  
   - Include relevant code snippets wrapped in Markdown Python blocks:  
   ```python
   {code}
   ```
   - Add a brief explanation of what the code does and why it's a key.
   1. Data Preprocessing (Short Key Snippets)
   2. Model Training, Evaluation, Prediction
   3. Submission File Creation
   4. Other Key Snippets

5. **Metrics**  
   - Share performance metric `{metrics}` and briefly describe what each metric signifies (e.g., "Accuracy tells us how often the model gets it right"):

6. **Takeaways**  
   - Wrap up with a concise summary of results, emphasizing their significance in a real-world context. For example: "This model predicts X with an accuracy of Y%, demonstrating its potential in Z applications."

Engage your audience with a relatable, professional tone that simplifies complex ideas without oversimplifying the context. Ensure the report can resonate with both experts and non-experts alike.
"""
